"""
Name: Ardi Artani
Email: ARDI.ARTANI96@myhunter.cuny.edu
Resources: n/a
"""
import numpy as np
import pandas as pd
import p38
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# df: a DataFrame that including the columns specified in cols.
# col: a list of names of columns in the DataFrameIt has a default value of ['Registration', 'Color', 'State'].
# Returns the DataFrame with an additional indicator columns generated by get_dummies for specified columns. The drop_first flag is set to True to drop extraneous columns.
def addIndicators(df,cols=['Registration', 'Color', 'State']):
    return pd.get_dummies(df, columns=cols, drop_first=True)

# df: a DataFrame that includes the specified columns.
# xes: the columns that are the independent variables for the model.
# y_col: a column name containing the dependent variable (what's being predicted) in the model. It has a default value is NumTickets.
# test_size: the size of the test set created when the data is divided into test and training sets with train_test_split. The default value is 0.25.
# random_state: the random seed used when the data is divided into test and training sets with train_test_split. The default value is 17.
# The function returns the (score) of the model computed on the test data and the classifier.
def build_clf(df, xes, y_col = "NumTickets", test_size = 0.25, random_state=17):
    x_, x_test, y_, y_test = train_test_split(df[xes], df[y_col], random_state = random_state, test_size = test_size)
    clf = LinearRegression()
    clf.fit(x_,y_)
    score_ = clf.score(x_test, y_test)

    return score_, clf
